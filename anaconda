# -*- coding: utf-8 -*-

import re

class Anakonda(object):
    
    @staticmethod
    def text_clear(s: str) -> str:
        s = s.replace('\n', ' ')
        # s = s.replace('. ', ' . ')  # для слов в конце предл-я
        while "  " in s:
            s = s.replace("  ", " ")
        return s

    @staticmethod
    def mix_words_re(s: str):
        """
        patt_re = r"([a-zA-Z]+[-\/\\]?[0-9]+[\S]*|[0-9]+[-\/\\]?[a-zA-Z]+[\S]*)"
        """
        patt_re = r"([a-zA-Z]+[-\/\\]?[0-9]+[\S]*|[0-9]+[-\/\\]?[a-zA-Z]+[\S]*)"
        return list(re.finditer(patt_re, s))

    @staticmethod
    def thing(s:str):
        # !!!! (r'((\d+)[-\s]*\шт[.а-яёА-ЯЁ]*\b)'
        pattern = r"((\d+)[-\s]*\шт[.а-яёА-ЯЁ]*\b)"
        regex = re.compile(pattern, re.IGNORECASE)
        return re.findall(regex, s)

    def TEST(self, text_src):
        print('---------- def TEST  -------------------')
        rezult=[]
        text = self.text_clear(text_src)
        matchs = self.mix_words_re(text)
        if len(matchs)==0:
            return rezult
        keys = [match[0] for match in matchs]
        positions = [match.span() for match in matchs]
        # print(keys)
        # print(positions)
        pos_s, pos_e = zip(*positions)
        pos_s, pos_e = list(pos_s), list(pos_e)
        # print(pos_s)
        # print(pos_e)
        lll = [[pos_e[i], pos_s[i + 1]] for i in range(len(pos_e) - 1)]
        lll.append([pos_e[-1], len(text) - 1])
        for i, area in enumerate(lll):
            key, sector = keys[i], text[area[0]:area[1]].strip()
            if len(sector) > 30:
                sector = sector[0:30] + '...'
            th = self.thing(sector)
            # print(th)
            if th:
                # print(f'{key:<15} {th[1]}"{th}" in {sector} ')
                print(f'{key:<15} {th[0][1]} Расш: "{th}" in <<{sector}>> ')
                rezult.append([key,th[0][1]])
            else:
                print(f'{key:<15} "{th}" in {sector} ')
                rezult.append([key, None])
        return rezult

if __name__ == '__main__':
    my_text = """
        Прoсим сообщить наличий подшипников SKF 6305-2RS1/C3 (20шт).
        Возможена замена на аналог Timken. (Asahi    788VVV2 10 шт) 


        Можете ли вы поставить их в г.Москву 170010.
        Сообщите можете ли поставить подшипники маломагнитные 
           С уважением Румянцев А.В. инн 1770000009 АО"Сокол", 
        170009 г. Тверь, ул. Победы   
        с уважением ivanov@mail.ru, 
    """
    print(my_text)
    parser = Anakonda()
    rez = parser.TEST(my_text)
    print('ИТОГ:',rez)
    """
    ---------- def TEST  -------------------
2RS1/C3         20 Расш: "[('20шт', '20')]" in <<(20шт). Возможена замена на ан...>> 
788VVV2         20 Расш: "[('20 шт', '20')]" in <<20 шт) Можете ли вы поставить ...>> 
ИТОГ: [['2RS1/C3', '20'], ['788VVV2', '20']]
    """
